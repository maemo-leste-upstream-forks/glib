Index: glib2.0-2.25.10/docs/reference/glib/running.sgml
===================================================================
--- glib2.0-2.25.10.orig/docs/reference/glib/running.sgml	2010-06-12 20:04:32.000000000 +0200
+++ glib2.0-2.25.10/docs/reference/glib/running.sgml	2010-06-24 20:01:26.150959575 +0200
@@ -202,6 +202,22 @@
   </para>
 </formalpara> 
 
+<formalpara id="G_HOME">
+  <title><envar>G_HOME</envar></title>
+
+  <para>
+    For various reasons, GLib applications ignore the <envar>HOME</envar>
+    environment variable on Unix systems and will use the user directory
+    as specified by the <filename>passwd</filename> entry, which is more
+    reliable.
+  </para>
+  <para>
+    The <envar>G_HOME</envar> environment variable will override any
+    other setting for the home directory. It is not meant for daily usage,
+    but it is useful in testing or building environments.
+  </para>
+</formalpara>
+
 </refsect2>
 
 <refsect2 id="setlocale">
Index: glib2.0-2.25.10/glib/gutils.c
===================================================================
--- glib2.0-2.25.10.orig/glib/gutils.c	2010-06-12 20:04:33.000000000 +0200
+++ glib2.0-2.25.10/glib/gutils.c	2010-06-24 20:01:26.152917925 +0200
@@ -1552,11 +1552,14 @@
     }
 #endif	/* !G_OS_WIN32 */
   
+  g_home_dir = g_strdup (g_getenv ("G_HOME"));
+  
 #ifdef G_OS_WIN32
   /* We check $HOME first for Win32, though it is a last resort for Unix
    * where we prefer the results of getpwuid().
    */
-  g_home_dir = g_strdup (g_getenv ("HOME"));
+  if (!g_home_dir)
+    g_home_dir = g_strdup (g_getenv ("HOME"));
 
   /* Only believe HOME if it is an absolute path and exists */
   if (g_home_dir)
@@ -1852,6 +1855,11 @@
  *      homedir = g_get_home_dir (<!-- -->);
  * ]|
  *
+ * However, to allow changing this value for testing and development
+ * purposes, the value of the <envar>G_HOME</envar> environment 
+ * variable, if set, will override the <filename>passwd</filename>
+ * entry.
+ *
  * Returns: the current user's home directory
  */
 G_CONST_RETURN gchar*
